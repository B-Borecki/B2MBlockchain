// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: blockchain.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_blockchain_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_blockchain_2eproto;
namespace BlockchainProto {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Blockchain;
struct BlockchainDefaultTypeInternal;
extern BlockchainDefaultTypeInternal _Blockchain_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace BlockchainProto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace BlockchainProto {

// ===================================================================


// -------------------------------------------------------------------

class Transaction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BlockchainProto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transaction(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transaction(const Transaction& from) : Transaction(nullptr, from) {}
  inline Transaction(Transaction&& from) noexcept
      : Transaction(nullptr, std::move(from)) {}
  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
        &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Transaction& a, Transaction& b) { a.Swap(&b); }
  inline void Swap(Transaction* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Transaction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transaction& from) { Transaction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Transaction* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BlockchainProto.Transaction"; }

 protected:
  explicit Transaction(::google::protobuf::Arena* arena);
  Transaction(::google::protobuf::Arena* arena, const Transaction& from);
  Transaction(::google::protobuf::Arena* arena, Transaction&& from) noexcept
      : Transaction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string sender_id = 1;
  void clear_sender_id() ;
  const std::string& sender_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_id(Arg_&& arg, Args_... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* value);

  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(
      const std::string& value);
  std::string* _internal_mutable_sender_id();

  public:
  // string receiver_id = 2;
  void clear_receiver_id() ;
  const std::string& receiver_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receiver_id(Arg_&& arg, Args_... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* value);

  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(
      const std::string& value);
  std::string* _internal_mutable_receiver_id();

  public:
  // double amount = 3;
  void clear_amount() ;
  double amount() const;
  void set_amount(double value);

  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);

  public:
  // @@protoc_insertion_point(class_scope:BlockchainProto.Transaction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Transaction_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transaction& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sender_id_;
    ::google::protobuf::internal::ArenaStringPtr receiver_id_;
    double amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Block final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BlockchainProto.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Block(
      ::google::protobuf::internal::ConstantInitialized);

  inline Block(const Block& from) : Block(nullptr, from) {}
  inline Block(Block&& from) noexcept
      : Block(nullptr, std::move(from)) {}
  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
        &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Block& a, Block& b) { a.Swap(&b); }
  inline void Swap(Block* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Block>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Block& from) { Block::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Block* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BlockchainProto.Block"; }

 protected:
  explicit Block(::google::protobuf::Arena* arena);
  Block(::google::protobuf::Arena* arena, const Block& from);
  Block(::google::protobuf::Arena* arena, Block&& from) noexcept
      : Block(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTActionsLstFieldNumber = 4,
    kIdBlockFieldNumber = 1,
    kIdPrevFieldNumber = 2,
    kNonceFieldNumber = 3,
  };
  // repeated .BlockchainProto.Transaction t_actions_lst = 4;
  int t_actions_lst_size() const;
  private:
  int _internal_t_actions_lst_size() const;

  public:
  void clear_t_actions_lst() ;
  ::BlockchainProto::Transaction* mutable_t_actions_lst(int index);
  ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>* mutable_t_actions_lst();

  private:
  const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>& _internal_t_actions_lst() const;
  ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>* _internal_mutable_t_actions_lst();
  public:
  const ::BlockchainProto::Transaction& t_actions_lst(int index) const;
  ::BlockchainProto::Transaction* add_t_actions_lst();
  const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>& t_actions_lst() const;
  // string id_block = 1;
  void clear_id_block() ;
  const std::string& id_block() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id_block(Arg_&& arg, Args_... args);
  std::string* mutable_id_block();
  PROTOBUF_NODISCARD std::string* release_id_block();
  void set_allocated_id_block(std::string* value);

  private:
  const std::string& _internal_id_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_block(
      const std::string& value);
  std::string* _internal_mutable_id_block();

  public:
  // string id_prev = 2;
  void clear_id_prev() ;
  const std::string& id_prev() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id_prev(Arg_&& arg, Args_... args);
  std::string* mutable_id_prev();
  PROTOBUF_NODISCARD std::string* release_id_prev();
  void set_allocated_id_prev(std::string* value);

  private:
  const std::string& _internal_id_prev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_prev(
      const std::string& value);
  std::string* _internal_mutable_id_prev();

  public:
  // int32 nonce = 3;
  void clear_nonce() ;
  ::int32_t nonce() const;
  void set_nonce(::int32_t value);

  private:
  ::int32_t _internal_nonce() const;
  void _internal_set_nonce(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:BlockchainProto.Block)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Block_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Block& from_msg);
    ::google::protobuf::RepeatedPtrField< ::BlockchainProto::Transaction > t_actions_lst_;
    ::google::protobuf::internal::ArenaStringPtr id_block_;
    ::google::protobuf::internal::ArenaStringPtr id_prev_;
    ::int32_t nonce_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Blockchain final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BlockchainProto.Blockchain) */ {
 public:
  inline Blockchain() : Blockchain(nullptr) {}
  ~Blockchain() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Blockchain(
      ::google::protobuf::internal::ConstantInitialized);

  inline Blockchain(const Blockchain& from) : Blockchain(nullptr, from) {}
  inline Blockchain(Blockchain&& from) noexcept
      : Blockchain(nullptr, std::move(from)) {}
  inline Blockchain& operator=(const Blockchain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blockchain& operator=(Blockchain&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Blockchain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blockchain* internal_default_instance() {
    return reinterpret_cast<const Blockchain*>(
        &_Blockchain_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Blockchain& a, Blockchain& b) { a.Swap(&b); }
  inline void Swap(Blockchain* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blockchain* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Blockchain* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Blockchain>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Blockchain& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Blockchain& from) { Blockchain::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Blockchain* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BlockchainProto.Blockchain"; }

 protected:
  explicit Blockchain(::google::protobuf::Arena* arena);
  Blockchain(::google::protobuf::Arena* arena, const Blockchain& from);
  Blockchain(::google::protobuf::Arena* arena, Blockchain&& from) noexcept
      : Blockchain(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChainFieldNumber = 1,
  };
  // repeated .BlockchainProto.Block chain = 1;
  int chain_size() const;
  private:
  int _internal_chain_size() const;

  public:
  void clear_chain() ;
  ::BlockchainProto::Block* mutable_chain(int index);
  ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>* mutable_chain();

  private:
  const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>& _internal_chain() const;
  ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>* _internal_mutable_chain();
  public:
  const ::BlockchainProto::Block& chain(int index) const;
  ::BlockchainProto::Block* add_chain();
  const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>& chain() const;
  // @@protoc_insertion_point(class_scope:BlockchainProto.Blockchain)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Blockchain_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Blockchain& from_msg);
    ::google::protobuf::RepeatedPtrField< ::BlockchainProto::Block > chain_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Transaction

// string sender_id = 1;
inline void Transaction::clear_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& Transaction::sender_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockchainProto.Transaction.sender_id)
  return _internal_sender_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transaction::set_sender_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BlockchainProto.Transaction.sender_id)
}
inline std::string* Transaction::mutable_sender_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Transaction.sender_id)
  return _s;
}
inline const std::string& Transaction::_internal_sender_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_id_.Get();
}
inline void Transaction::_internal_set_sender_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.Set(value, GetArena());
}
inline std::string* Transaction::_internal_mutable_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_id_.Mutable( GetArena());
}
inline std::string* Transaction::release_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BlockchainProto.Transaction.sender_id)
  return _impl_.sender_id_.Release();
}
inline void Transaction::set_allocated_sender_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_id_.IsDefault()) {
          _impl_.sender_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Transaction.sender_id)
}

// string receiver_id = 2;
inline void Transaction::clear_receiver_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& Transaction::receiver_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockchainProto.Transaction.receiver_id)
  return _internal_receiver_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transaction::set_receiver_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BlockchainProto.Transaction.receiver_id)
}
inline std::string* Transaction::mutable_receiver_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Transaction.receiver_id)
  return _s;
}
inline const std::string& Transaction::_internal_receiver_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.receiver_id_.Get();
}
inline void Transaction::_internal_set_receiver_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_id_.Set(value, GetArena());
}
inline std::string* Transaction::_internal_mutable_receiver_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.receiver_id_.Mutable( GetArena());
}
inline std::string* Transaction::release_receiver_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BlockchainProto.Transaction.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void Transaction::set_allocated_receiver_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.receiver_id_.IsDefault()) {
          _impl_.receiver_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Transaction.receiver_id)
}

// double amount = 3;
inline void Transaction::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = 0;
}
inline double Transaction::amount() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Transaction.amount)
  return _internal_amount();
}
inline void Transaction::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:BlockchainProto.Transaction.amount)
}
inline double Transaction::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void Transaction::_internal_set_amount(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// Block

// string id_block = 1;
inline void Block::clear_id_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_block_.ClearToEmpty();
}
inline const std::string& Block::id_block() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.id_block)
  return _internal_id_block();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Block::set_id_block(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_block_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BlockchainProto.Block.id_block)
}
inline std::string* Block::mutable_id_block() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id_block();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Block.id_block)
  return _s;
}
inline const std::string& Block::_internal_id_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_block_.Get();
}
inline void Block::_internal_set_id_block(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_block_.Set(value, GetArena());
}
inline std::string* Block::_internal_mutable_id_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_block_.Mutable( GetArena());
}
inline std::string* Block::release_id_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BlockchainProto.Block.id_block)
  return _impl_.id_block_.Release();
}
inline void Block::set_allocated_id_block(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_block_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_block_.IsDefault()) {
          _impl_.id_block_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Block.id_block)
}

// string id_prev = 2;
inline void Block::clear_id_prev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_prev_.ClearToEmpty();
}
inline const std::string& Block::id_prev() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.id_prev)
  return _internal_id_prev();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Block::set_id_prev(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_prev_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BlockchainProto.Block.id_prev)
}
inline std::string* Block::mutable_id_prev() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id_prev();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Block.id_prev)
  return _s;
}
inline const std::string& Block::_internal_id_prev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_prev_.Get();
}
inline void Block::_internal_set_id_prev(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_prev_.Set(value, GetArena());
}
inline std::string* Block::_internal_mutable_id_prev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_prev_.Mutable( GetArena());
}
inline std::string* Block::release_id_prev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BlockchainProto.Block.id_prev)
  return _impl_.id_prev_.Release();
}
inline void Block::set_allocated_id_prev(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_prev_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_prev_.IsDefault()) {
          _impl_.id_prev_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Block.id_prev)
}

// int32 nonce = 3;
inline void Block::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_ = 0;
}
inline ::int32_t Block::nonce() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.nonce)
  return _internal_nonce();
}
inline void Block::set_nonce(::int32_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:BlockchainProto.Block.nonce)
}
inline ::int32_t Block::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_;
}
inline void Block::_internal_set_nonce(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_ = value;
}

// repeated .BlockchainProto.Transaction t_actions_lst = 4;
inline int Block::_internal_t_actions_lst_size() const {
  return _internal_t_actions_lst().size();
}
inline int Block::t_actions_lst_size() const {
  return _internal_t_actions_lst_size();
}
inline void Block::clear_t_actions_lst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_actions_lst_.Clear();
}
inline ::BlockchainProto::Transaction* Block::mutable_t_actions_lst(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Block.t_actions_lst)
  return _internal_mutable_t_actions_lst()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>* Block::mutable_t_actions_lst()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BlockchainProto.Block.t_actions_lst)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_t_actions_lst();
}
inline const ::BlockchainProto::Transaction& Block::t_actions_lst(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.t_actions_lst)
  return _internal_t_actions_lst().Get(index);
}
inline ::BlockchainProto::Transaction* Block::add_t_actions_lst() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::BlockchainProto::Transaction* _add = _internal_mutable_t_actions_lst()->Add();
  // @@protoc_insertion_point(field_add:BlockchainProto.Block.t_actions_lst)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>& Block::t_actions_lst() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BlockchainProto.Block.t_actions_lst)
  return _internal_t_actions_lst();
}
inline const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>&
Block::_internal_t_actions_lst() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.t_actions_lst_;
}
inline ::google::protobuf::RepeatedPtrField<::BlockchainProto::Transaction>*
Block::_internal_mutable_t_actions_lst() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.t_actions_lst_;
}

// -------------------------------------------------------------------

// Blockchain

// repeated .BlockchainProto.Block chain = 1;
inline int Blockchain::_internal_chain_size() const {
  return _internal_chain().size();
}
inline int Blockchain::chain_size() const {
  return _internal_chain_size();
}
inline void Blockchain::clear_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_.Clear();
}
inline ::BlockchainProto::Block* Blockchain::mutable_chain(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Blockchain.chain)
  return _internal_mutable_chain()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>* Blockchain::mutable_chain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BlockchainProto.Blockchain.chain)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chain();
}
inline const ::BlockchainProto::Block& Blockchain::chain(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockchainProto.Blockchain.chain)
  return _internal_chain().Get(index);
}
inline ::BlockchainProto::Block* Blockchain::add_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::BlockchainProto::Block* _add = _internal_mutable_chain()->Add();
  // @@protoc_insertion_point(field_add:BlockchainProto.Blockchain.chain)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>& Blockchain::chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BlockchainProto.Blockchain.chain)
  return _internal_chain();
}
inline const ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>&
Blockchain::_internal_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_;
}
inline ::google::protobuf::RepeatedPtrField<::BlockchainProto::Block>*
Blockchain::_internal_mutable_chain() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chain_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace BlockchainProto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto_2epb_2eh
