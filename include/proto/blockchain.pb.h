// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto;
namespace BlockchainProto {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Blockchain;
struct BlockchainDefaultTypeInternal;
extern BlockchainDefaultTypeInternal _Blockchain_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace BlockchainProto
PROTOBUF_NAMESPACE_OPEN
template<> ::BlockchainProto::Block* Arena::CreateMaybeMessage<::BlockchainProto::Block>(Arena*);
template<> ::BlockchainProto::Blockchain* Arena::CreateMaybeMessage<::BlockchainProto::Blockchain>(Arena*);
template<> ::BlockchainProto::Transaction* Arena::CreateMaybeMessage<::BlockchainProto::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BlockchainProto {

// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockchainProto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockchainProto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // double amount = 3;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:BlockchainProto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockchainProto.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit constexpr Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockchainProto.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTActionsLstFieldNumber = 4,
    kIdBlockFieldNumber = 1,
    kIdPrevFieldNumber = 2,
    kNonceFieldNumber = 3,
  };
  // repeated .BlockchainProto.Transaction t_actions_lst = 4;
  int t_actions_lst_size() const;
  private:
  int _internal_t_actions_lst_size() const;
  public:
  void clear_t_actions_lst();
  ::BlockchainProto::Transaction* mutable_t_actions_lst(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Transaction >*
      mutable_t_actions_lst();
  private:
  const ::BlockchainProto::Transaction& _internal_t_actions_lst(int index) const;
  ::BlockchainProto::Transaction* _internal_add_t_actions_lst();
  public:
  const ::BlockchainProto::Transaction& t_actions_lst(int index) const;
  ::BlockchainProto::Transaction* add_t_actions_lst();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Transaction >&
      t_actions_lst() const;

  // string id_block = 1;
  void clear_id_block();
  const std::string& id_block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_block();
  PROTOBUF_NODISCARD std::string* release_id_block();
  void set_allocated_id_block(std::string* id_block);
  private:
  const std::string& _internal_id_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_block(const std::string& value);
  std::string* _internal_mutable_id_block();
  public:

  // string id_prev = 2;
  void clear_id_prev();
  const std::string& id_prev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_prev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_prev();
  PROTOBUF_NODISCARD std::string* release_id_prev();
  void set_allocated_id_prev(std::string* id_prev);
  private:
  const std::string& _internal_id_prev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_prev(const std::string& value);
  std::string* _internal_mutable_id_prev();
  public:

  // int32 nonce = 3;
  void clear_nonce();
  int32_t nonce() const;
  void set_nonce(int32_t value);
  private:
  int32_t _internal_nonce() const;
  void _internal_set_nonce(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BlockchainProto.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Transaction > t_actions_lst_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_prev_;
  int32_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Blockchain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockchainProto.Blockchain) */ {
 public:
  inline Blockchain() : Blockchain(nullptr) {}
  ~Blockchain() override;
  explicit constexpr Blockchain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Blockchain(const Blockchain& from);
  Blockchain(Blockchain&& from) noexcept
    : Blockchain() {
    *this = ::std::move(from);
  }

  inline Blockchain& operator=(const Blockchain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blockchain& operator=(Blockchain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Blockchain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blockchain* internal_default_instance() {
    return reinterpret_cast<const Blockchain*>(
               &_Blockchain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Blockchain& a, Blockchain& b) {
    a.Swap(&b);
  }
  inline void Swap(Blockchain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blockchain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Blockchain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Blockchain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Blockchain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Blockchain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blockchain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockchainProto.Blockchain";
  }
  protected:
  explicit Blockchain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainFieldNumber = 1,
  };
  // repeated .BlockchainProto.Block chain = 1;
  int chain_size() const;
  private:
  int _internal_chain_size() const;
  public:
  void clear_chain();
  ::BlockchainProto::Block* mutable_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Block >*
      mutable_chain();
  private:
  const ::BlockchainProto::Block& _internal_chain(int index) const;
  ::BlockchainProto::Block* _internal_add_chain();
  public:
  const ::BlockchainProto::Block& chain(int index) const;
  ::BlockchainProto::Block* add_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Block >&
      chain() const;

  // @@protoc_insertion_point(class_scope:BlockchainProto.Blockchain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Block > chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// string sender_id = 1;
inline void Transaction::clear_sender_id() {
  sender_id_.ClearToEmpty();
}
inline const std::string& Transaction::sender_id() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Transaction.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockchainProto.Transaction.sender_id)
}
inline std::string* Transaction::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Transaction.sender_id)
  return _s;
}
inline const std::string& Transaction::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void Transaction::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_sender_id() {
  // @@protoc_insertion_point(field_release:BlockchainProto.Transaction.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Transaction.sender_id)
}

// string receiver_id = 2;
inline void Transaction::clear_receiver_id() {
  receiver_id_.ClearToEmpty();
}
inline const std::string& Transaction::receiver_id() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Transaction.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockchainProto.Transaction.receiver_id)
}
inline std::string* Transaction::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Transaction.receiver_id)
  return _s;
}
inline const std::string& Transaction::_internal_receiver_id() const {
  return receiver_id_.Get();
}
inline void Transaction::_internal_set_receiver_id(const std::string& value) {
  
  receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_receiver_id() {
  
  return receiver_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_receiver_id() {
  // @@protoc_insertion_point(field_release:BlockchainProto.Transaction.receiver_id)
  return receiver_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  receiver_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Transaction.receiver_id)
}

// double amount = 3;
inline void Transaction::clear_amount() {
  amount_ = 0;
}
inline double Transaction::_internal_amount() const {
  return amount_;
}
inline double Transaction::amount() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Transaction.amount)
  return _internal_amount();
}
inline void Transaction::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void Transaction::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:BlockchainProto.Transaction.amount)
}

// -------------------------------------------------------------------

// Block

// string id_block = 1;
inline void Block::clear_id_block() {
  id_block_.ClearToEmpty();
}
inline const std::string& Block::id_block() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.id_block)
  return _internal_id_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_id_block(ArgT0&& arg0, ArgT... args) {
 
 id_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockchainProto.Block.id_block)
}
inline std::string* Block::mutable_id_block() {
  std::string* _s = _internal_mutable_id_block();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Block.id_block)
  return _s;
}
inline const std::string& Block::_internal_id_block() const {
  return id_block_.Get();
}
inline void Block::_internal_set_id_block(const std::string& value) {
  
  id_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_id_block() {
  
  return id_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_id_block() {
  // @@protoc_insertion_point(field_release:BlockchainProto.Block.id_block)
  return id_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_id_block(std::string* id_block) {
  if (id_block != nullptr) {
    
  } else {
    
  }
  id_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_block,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_block_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Block.id_block)
}

// string id_prev = 2;
inline void Block::clear_id_prev() {
  id_prev_.ClearToEmpty();
}
inline const std::string& Block::id_prev() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.id_prev)
  return _internal_id_prev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_id_prev(ArgT0&& arg0, ArgT... args) {
 
 id_prev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockchainProto.Block.id_prev)
}
inline std::string* Block::mutable_id_prev() {
  std::string* _s = _internal_mutable_id_prev();
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Block.id_prev)
  return _s;
}
inline const std::string& Block::_internal_id_prev() const {
  return id_prev_.Get();
}
inline void Block::_internal_set_id_prev(const std::string& value) {
  
  id_prev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_id_prev() {
  
  return id_prev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_id_prev() {
  // @@protoc_insertion_point(field_release:BlockchainProto.Block.id_prev)
  return id_prev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_id_prev(std::string* id_prev) {
  if (id_prev != nullptr) {
    
  } else {
    
  }
  id_prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_prev,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_prev_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockchainProto.Block.id_prev)
}

// int32 nonce = 3;
inline void Block::clear_nonce() {
  nonce_ = 0;
}
inline int32_t Block::_internal_nonce() const {
  return nonce_;
}
inline int32_t Block::nonce() const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.nonce)
  return _internal_nonce();
}
inline void Block::_internal_set_nonce(int32_t value) {
  
  nonce_ = value;
}
inline void Block::set_nonce(int32_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:BlockchainProto.Block.nonce)
}

// repeated .BlockchainProto.Transaction t_actions_lst = 4;
inline int Block::_internal_t_actions_lst_size() const {
  return t_actions_lst_.size();
}
inline int Block::t_actions_lst_size() const {
  return _internal_t_actions_lst_size();
}
inline void Block::clear_t_actions_lst() {
  t_actions_lst_.Clear();
}
inline ::BlockchainProto::Transaction* Block::mutable_t_actions_lst(int index) {
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Block.t_actions_lst)
  return t_actions_lst_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Transaction >*
Block::mutable_t_actions_lst() {
  // @@protoc_insertion_point(field_mutable_list:BlockchainProto.Block.t_actions_lst)
  return &t_actions_lst_;
}
inline const ::BlockchainProto::Transaction& Block::_internal_t_actions_lst(int index) const {
  return t_actions_lst_.Get(index);
}
inline const ::BlockchainProto::Transaction& Block::t_actions_lst(int index) const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Block.t_actions_lst)
  return _internal_t_actions_lst(index);
}
inline ::BlockchainProto::Transaction* Block::_internal_add_t_actions_lst() {
  return t_actions_lst_.Add();
}
inline ::BlockchainProto::Transaction* Block::add_t_actions_lst() {
  ::BlockchainProto::Transaction* _add = _internal_add_t_actions_lst();
  // @@protoc_insertion_point(field_add:BlockchainProto.Block.t_actions_lst)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Transaction >&
Block::t_actions_lst() const {
  // @@protoc_insertion_point(field_list:BlockchainProto.Block.t_actions_lst)
  return t_actions_lst_;
}

// -------------------------------------------------------------------

// Blockchain

// repeated .BlockchainProto.Block chain = 1;
inline int Blockchain::_internal_chain_size() const {
  return chain_.size();
}
inline int Blockchain::chain_size() const {
  return _internal_chain_size();
}
inline void Blockchain::clear_chain() {
  chain_.Clear();
}
inline ::BlockchainProto::Block* Blockchain::mutable_chain(int index) {
  // @@protoc_insertion_point(field_mutable:BlockchainProto.Blockchain.chain)
  return chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Block >*
Blockchain::mutable_chain() {
  // @@protoc_insertion_point(field_mutable_list:BlockchainProto.Blockchain.chain)
  return &chain_;
}
inline const ::BlockchainProto::Block& Blockchain::_internal_chain(int index) const {
  return chain_.Get(index);
}
inline const ::BlockchainProto::Block& Blockchain::chain(int index) const {
  // @@protoc_insertion_point(field_get:BlockchainProto.Blockchain.chain)
  return _internal_chain(index);
}
inline ::BlockchainProto::Block* Blockchain::_internal_add_chain() {
  return chain_.Add();
}
inline ::BlockchainProto::Block* Blockchain::add_chain() {
  ::BlockchainProto::Block* _add = _internal_add_chain();
  // @@protoc_insertion_point(field_add:BlockchainProto.Blockchain.chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockchainProto::Block >&
Blockchain::chain() const {
  // @@protoc_insertion_point(field_list:BlockchainProto.Blockchain.chain)
  return chain_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BlockchainProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
